# Diego Narvaez Hernandez  
**UNIVERSITY OF NORTH TEXAS**  
**CSCE 3550: JWKS Program**  
Instructor: Dr. Jacob Hochstetler  
September 22, 2024  
Student Number: 11512562  
EUID: dn0240  

# JWKS Server Implementation

## Overview

This project implements a RESTful JWKS (JSON Web Key Set) server that provides public RSA keys with unique Key IDs (kid) for verifying JSON Web Tokens (JWTs). The server also supports key expiry, an authentication endpoint, and the issuance of JWTs signed with expired keys based on a query parameter.

### Key Features:
- **RSA Key Pair Generation**: Each key is associated with a unique `kid` and an expiry timestamp.
- **RESTful API**: 
  - `GET /jwks` serves public keys in JWKS format, only serving keys that haven't expired.
  - `POST /auth`: Issues a JWT on successful request. Includes an option to issue a JWT signed with an expired key if the `expired` query parameter is present.
- **Key Expiry**: Expired keys are automatically excluded from the public JWKS.
  
## Requirements

### Project Scope:
- Develop a JWKS server using a web framework (such as Flask for Python).
- Implement RSA key generation and associate each key with a `kid` and expiry.
- Ensure the server can serve public keys, handle JWT signing, and process the "expired" query parameter.
  
### Language and Framework:
- Implemented using `Python` and `Flask` web framework.
  
### Key Concepts to Understand:
- **HTTP and RESTful Services**: Understand how HTTP methods, headers, and status codes work.
- **JWT and JOSE**: Familiarity with JSON Web Tokens (JWT) and JSON Web Key Set (JWKS).
- **Key Expiry**: Understand the importance of `kid` and expiry in JWT validation.

## Endpoints

### 1. `/jwks` (GET)
- **Purpose**: Serves the JWKS with public keys.
- **Response**: Returns a list of active (non-expired) public keys in JWKS format.
- **Example**:
  ```json
  {
    "keys": [
      {
        "kid": "unique-key-id",
        "kty": "RSA",
        "n": "modulus",
        "e": "exponent"
      }
    ]
  }


### 2. `/auth` (POST)
- **Purpose**: Issues a JWT signed with an unexpired key.
- **Query Parameter**: If the `expired` parameter is provided, the JWT is signed with an expired key.
- **Example**:
  ```bash
  curl -X POST http://localhost:8080/auth


### How to run the server 
git clone https://github.com/Santiagos-Vertigo/UNT_CSCE_3550_Fall_2024-.git
cd <project-directory>

Dependencies
pip install -r requirements.txt

Run the server
python main.py


Run the testing unit
./gradebot project1

Example
╭────────────────────────────────────────┬────────┬──────────┬─────────╮
│ RUBRIC ITEM                            │ ERROR? │ POSSIBLE │ AWARDED │
├────────────────────────────────────────┼────────┼──────────┼─────────┤
│ /auth valid JWT authN                  │        │       15 │      15 │
│ /auth?expired=true JWT authN (expired) │        │        5 │       5 │
│ Proper HTTP methods/Status codes       │        │       10 │      10 │
│ Valid JWK found in JWKS                │        │       20 │      20 │
│ Expired JWT is expired                 │        │        5 │       5 │
│ Expired JWK does not exist in JWKS     │        │       10 │      10 │
├────────────────────────────────────────┼────────┼──────────┼─────────┤
│                                        │  TOTAL │       65 │      65 │
╰────────────────────────────────────────┴────────┴──────────┴─────────╯
press any key to continue...
CSCE3550_Darwin_x86_64 ~ # ./gradebot project1






